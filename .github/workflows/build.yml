name: Build

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build-ocaml:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev libsqlite3-dev pkg-config sqlite3 bubblewrap g++-multilib gcc-multilib mercurial musl-tools rsync
        # Try to install darcs, but don't fail if it's not available
        sudo apt-get install -y darcs || echo "darcs not available in apt, will skip"
    
    - name: Set up OCaml
      uses: ocaml/setup-ocaml@v2
      with:
          ocaml-compiler: 4.14.0
          dune-cache: true
            
    - name: Install OCaml dependencies
      run: |
        opam install dune "async=v0.14.0" "async_unix=v0.14.0" "async_kernel=v0.14.0" caqti caqti-async caqti-driver-postgresql caqti-driver-sqlite3 caqti-dynload cohttp cohttp-async "core=v0.14.1" "core_kernel=v0.14.2" "core_unix=v0.14.0" graphql graphql-async graphql-cohttp graphql_parser ppx_deriving_yojson ppx_jane result sqlite3 uri astring base sexplib0 yojson stdio
        
    - name: Build OCaml project
      run: |
        eval $(opam env)
        dune build src/internal_trace_consumer.exe
        
    - name: Test OCaml project
      run: |
        eval $(opam env)
        dune runtest || echo "No tests found"

  build-rust:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
        
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          internal-log-fetcher/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build Rust project
      working-directory: internal-log-fetcher
      run: cargo build --verbose
      
    - name: Run Rust tests
      working-directory: internal-log-fetcher
      run: cargo test --verbose
      
    - name: Run clippy
      working-directory: internal-log-fetcher
      run: cargo clippy -- -D warnings
      
    - name: Check formatting
      working-directory: internal-log-fetcher
      run: cargo fmt -- --check

  build-docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build . -t internal-trace-consumer:latest